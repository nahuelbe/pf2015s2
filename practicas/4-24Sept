type FuzzySet a = a -> Float

fuzzyComplement :: FuzzySet a -> FuzzySet a
fcomplemento q = \e -> 1 - (q e)

fuzzyUnion :: FuzzySet a -> FuzzySet a -> FuzzySet a
union s q = \x -> s x + q x - (fuzzyIntersect s q) x

fuzzyIntersect :: FuzzySet a -> FuzzySet a -> FuzzySet a
fuzzyIntersect s q = \x -> min (s x) (q x)

gauss :: Int -> Int
gauss = sum id 0

{- 
1 - curry (uncurry f) = f

2 - flip (curry f) = curry (f.swap)

3 - gauss n = n * (n+1) `div` 2

4 - para todo xs, ts length (xs ++ ys) = length xs + length ys

Por inducci贸n en la estructura de las [a].

P(xs) = para todo ys length (xs ++ ys) = length xs + length ys

EI: P([]) ^ (para todo xs. P(xs) => P(x:xs))
    _____				   _____     ______
     CB						 HI		   TI	

CB: P([])

length ([] ++ ys) = length [] + length ys

(++).1 => length ys = length [] + length ys

length.1 => length ys = 0 + length ys

arit => length ys = length ys

		     TRUE

PI = 	   HI => TI
		P(xs) => P(x:xs)

length ((x:xs) ++ ys) = length (x:xs) + length ys

length.2 => length ((x:xs ++ ys)) = 1 + length xs + length ys

(++).2 => length (x:(xs ++ ys)) = 1 + length xs + length ys

length.2 => 1 + length (xs ++ ys) = 1 + length xs + length ys

arit => length (xs ++ ys) = length xs + length ys

HI => TRUE

5 - Para todo xs,ys. reverse (xs ++ ys) = reverse ys ++ reverse xs

Por inducci贸n en la estructura de las [a]

P(xs) = para todo ys reverse (xs ++ ys) = reverse ys ++ reverse xs

EI: P([]) ^ (para todo xs. P(xs) => P(x:xs))
    _____				   _____     ______
	 CB						 HI		   TI	

CB: P([])

reverse ([] ++ ys) = reverse ys ++ reverse []

(++).1 => reverse ys = reverse ys ++ reverse []

reverse.1 => reverse ys = reverse ys ++ []

lema (++[]) => reverse ys = reverse ys

					TRUE

PI: P(x:xs)

reverse (x:xs ++ ys) = reverse ys ++ reverse (x:xs)

(++).2 => reverse (x:(xs++ys)) = reverse ys ++ reverse (x:xs)

reverse.2 => reverse (xs ++ ys) ++ [x] = reverse ys ++ reverse xs ++ [x]

HI => reverse ys ++ reverse xs ++ [x] = reverse ys ++ reverse xs ++ [x]
		
								TRUE

LEMA (++[])

para todo xs. xs ++ [] = xs

Por inducci贸n en la estr de las [a]

P(xs) = xs ++ [] = xs

EI: P([]) ^ (para todo xs. P(xs) => P(x:xs))

CB: P([]) 

[] ++ [] = []

(++).1 => [] = []

			TRUE

PI: P(x:xs)

(x:xs) ++ [] = (x:xs)

(++).2 => x:(xs ++ []) = x:xs
HI => x:xs = x:xs
		  TRUE

6 - para todo xs reverse (reverse xs) = xs

Por inducci贸n en la estr de las [a]

P(xs) = reverse (reverse xs) = xs

EI: P([]) ^ (para todo xs. P(xs) => P(x:xs))

CB: P([])

reverse (reverse []) = []

reverse.1 => reverse [] = []

reverse.1 => [] = []
			   TRUE

PI: P(x:xs)

reverse (reverse (x:xs)) = (x:xs)

reverse.2 => reverse (reverse xs ++ [x]) = (x:xs)

ej. ant => reverse [x] ++ reverse (reverse xs) = (x:xs)

reverse.2 => reverse [] ++ [x] ++ reverse (reverse xs) = (x:xs)

reverse 1 => [] ++ [x] ++ reverse (reverse xs) = (x:xs)

(++).1 => (x:[]) ++ reverse (reverse xs) = (x:xs)

(++).2 => x : ([] ++ reverse (reverse xs)) = (x:xs)

(++).1 => x : (reverse (reverse xs)) = (x:xs)

HI => x:xs = x:Xs

		 TRUE





-}